@page "/"
@using FileHostingApi.Data
@using FileHostingApi.Data.Schemas
@using Microsoft.AspNetCore.WebUtilities
@using System.Net
@using GeneralPurposeLib
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<PageTitle>File Hosting</PageTitle>
<RequireLogin RedirectToLogin="false" Callback="OnLogin"></RequireLogin>

<h1>File Host</h1>
<p>
    This service allows you to upload a file and get a link that 
    anyone can use to download the file. It will also 
    embed the file in services like Discord.
</p>

@* If the file hasn't been uploaded *@
@if (!_uploaded && !_uploading) {
    <div>
        <div style="padding-bottom: 10px;">
            <label class="form-label">
                Browse Files (Upload Limit: @(GetDefaultMaxUploadSize(UploadLimitManager.GetUploadLimit(_user))))
            </label>
            <InputFile OnChange="@LoadFiles" style="background-color: rgb(34, 34, 34); color: #ffffff;" class="form-control"/>

            @if (Program.Config!["serble_appid"] != "" && Program.Config["integrate_serble"] == "true") {
                <div style="padding-top: 15px"></div>
                @if (_serbleLoggedIn) {
                    <p>Logged in</p>
                }
                else {
                    <a class="btn btn-primary" href="/makelogin">Login With Serble</a>
                }
                
            }

        </div>
    
        <p>@_statusText</p>

        <button class="btn btn-lg btn-primary btn-block" onclick="@Upload">
            Upload
        </button>

    </div>
}
// Finished uploading
else if (!_uploading) {
    <p>File Uploaded: <a href="@_uploadUrl">@_uploadUrl</a></p>
    
    <button class="btn btn-lg btn-primary btn-block" onclick="@NewUpload">
        Upload Another File
    </button>
}
// Uploading
else {
    <p>@_statusText</p>
}


@code {

    private IBrowserFile? _loadedFile;
    private string _statusText = "";
    private bool _uploaded;
    private bool _uploading;
    private string _uploadUrl = "";
    private User? _user;
    private bool _serbleLoggedIn;

    private async Task OnLogin((User?, string) data) {
        User? user = data.Item1;
        if (user == null) {
            return;
        }
        _serbleLoggedIn = true;
        _user = user;
        StateHasChanged();
    }

    private void LoadFiles(InputFileChangeEventArgs e) {
        _loadedFile = e.File;
    }

    private async void Upload() {
        if (Program.Config == null) throw new Exception();
        if (Program.StorageService == null) throw new Exception();
        if (_loadedFile == null) {
            _statusText = "No file selected";
            return;
        }
        _statusText = $"Uploading {_loadedFile.Name}";
        _uploaded = false;
        _uploading = true;
        InvokeAsync(StateHasChanged).Wait();
        string newName = RandomFileName() + "." + GetFileExtension(_loadedFile.Name);
        
        // Get max upload size
        long maxSize = UploadLimitManager.GetUploadLimit(_user);

        try {
            await Program.StorageService.UploadFile(newName, _loadedFile.OpenReadStream(maxSize));
        }
        catch (IOException e) {
            _statusText = $"File too large. Max size is {GetDefaultMaxUploadSize(maxSize)}.";
            _uploaded = false;
            _uploading = false;
            return;
        }
        catch (Exception e) {
            _statusText = "Upload failed: " + e.Message;
            return;
        }
        Logger.Debug("Uploaded File");
        
        _statusText = "Uploaded";
        _uploading = false;
        _uploaded = true;
        _uploadUrl = Program.Config["my_host"] + "files/" + newName + "?name=" + WebUtility.UrlEncode(_loadedFile.Name);
        await InvokeAsync(StateHasChanged);
    }
    
    // Function to generate a random file name
    private string RandomFileName() {
        string path = Path.GetRandomFileName();
        path = path.Replace(".", "");
        return path;
    }
    
    // Function to get a files extension
    private string GetFileExtension(string fileName) {
        if (string.IsNullOrEmpty(fileName)) {
            return "";
        }
        string[] fileParts = fileName.Split('.');
        if (fileParts.Length == 1 || string.IsNullOrEmpty(fileParts[^1])) {
            return "";
        }
        return fileParts[^1];
    }
    
    private string GetDefaultMaxUploadSize(long size = -1) {
        return size / 1000 / 1000 + " MB";
    }

    private async void NewUpload() {
        _uploaded = false;
        _uploadUrl = "";
        _statusText = "";
        _loadedFile = null;
        await InvokeAsync(StateHasChanged);
    }

    private void Login() {
        string uri = "https://serble.net/appauth";
        uri = QueryHelpers.AddQueryString(uri, "client_id", Program.Config!["serble_appid"]);
        uri = QueryHelpers.AddQueryString(uri, "redirect_uri", Program.Config["my_host"] + "callback");
        uri = QueryHelpers.AddQueryString(uri, "response_type", "token");
        uri = QueryHelpers.AddQueryString(uri, "scope", "user_info");
        uri = QueryHelpers.AddQueryString(uri, "state", RandomFileName());
        NavigationManager.NavigateTo(uri);
    }

}
